import time
from ana.model import ANANetwork, FunctionBase
import inspect
from VIS import *
from serial import Serial

network = ANANetwork()
# m5data = Serial('/dev/tty.M5StickCPlus',9600, timeout=.01)

threshold = 100
intensity = 2
goal_intensity = 10

check_BB = network.create_module(threshold, Check_BB(), 'check BB')
check_crosswalk = network.create_module(threshold, Check_crosswalk(), 'check crosswalk')
check_pedestrian_TL = network.create_module(threshold, Check_pedestrian_TL(), 'check pedestrian TL')
check_color_of_pedestrian_TL = network.create_module(threshold, Check_color_of_pedestrian_TL(), 'check color of pedestrian TL')
guide_to_BB = network.create_module(threshold, Guide_to_BB(), 'guide to BB')
guide_to_crosswalk = network.create_module(threshold, Guide_to_crosswalk(), 'guide to crosswalk')
check_cars = network.create_module(threshold, Check_cars(), 'check cars')
wait_signal = network.create_module(threshold, Wait_signal(), 'wait signal')
check_step_down = network.create_module(threshold, Check_steps(), 'check step down')
enter_intersection = network.create_module(threshold, Enter_intersection(), 'enter intersection')
check_opposite_BB = network.create_module(threshold, Check_opposite_BB(), 'check opposite BB')
# check_TL_in_other_direction = network.create_module(threshold, EchoFunction(), 'check TL in other direction')
# check_color_of_TL_in_other_direction = network.create_module(threshold, EchoFunction(), 'check_color of TL in other direction')
check_step_up = network.create_module(threshold, Check_steps(), 'check step up')
guide_to_opposite_BB = network.create_module(threshold, Guide_to_opposite_BB(), 'guide to opposite BB')
up_to_sidewalk = network.create_module(threshold, Up_to_sidewalk(), 'up to sidewalk')

at_intersection = network.create_data(intensity, 'at intersection')
is_BB = network.create_data(intensity, 'is BB')
is_crosswalk = network.create_data(intensity, 'is crosswalk')
is_pedestrian_TL = network.create_data(intensity, 'is pedestrian TL')
pedestrian_TL_is_blue = network.create_data(intensity, 'pedestrian TL is blue')
pedestrian_TL_is_red = network.create_data(intensity, 'pedestrian TL is red')
on_BB = network.create_data(intensity, 'on BB')
in_front_of_crosswalk = network.create_data(intensity, 'in front of crosswalk')
no_cars_approaching = network.create_data(intensity, 'no cars approaching')
waiting_signal = network.create_data(intensity, 'waiting signal')
# is_TL_in_other_direction = network.create_data(intensity, 'is TL in other direction')
is_step_down = network.create_data(intensity, 'is step down')
crossing_intersection = network.create_data(intensity, 'crossing intersection')
is_opposite_BB = network.create_data(intensity, 'is opposite BB')
in_front_of_opposite_BB = network.create_data(intensity, 'in front of opposite BB')
is_step_up = network.create_data(intensity, 'is step up')
on_opposite_sidewalk = network.create_goal(intensity, goal_intensity, 'on opposite sidewalk')

network.create_condition(at_intersection, check_BB)
network.create_condition(at_intersection, check_crosswalk)
network.create_condition(at_intersection, check_pedestrian_TL)
network.create_condition(is_crosswalk, check_pedestrian_TL)
network.create_condition(is_pedestrian_TL, check_color_of_pedestrian_TL)
network.create_condition(is_BB, guide_to_BB)
network.create_condition(is_crosswalk, guide_to_crosswalk)
network.create_condition(in_front_of_crosswalk, check_cars)
network.create_condition(on_BB, wait_signal)
network.create_condition(in_front_of_crosswalk, wait_signal)
network.create_condition(pedestrian_TL_is_red, wait_signal)
network.create_condition(no_cars_approaching, check_step_down)
network.create_condition(on_BB, check_step_down)
network.create_condition(in_front_of_crosswalk, check_step_down)
network.create_condition(pedestrian_TL_is_blue, check_step_down)
network.create_condition(is_step_down, enter_intersection)
network.create_condition(is_crosswalk, check_opposite_BB)
network.create_condition(crossing_intersection, check_opposite_BB)
# network.create_condition(waiting_signal, check_TL_in_other_direction)
# network.create_condition(is_TL_in_other_direction, check_color_of_TL_in_other_direction)
network.create_condition(crossing_intersection, check_step_up)
network.create_condition(in_front_of_opposite_BB, check_step_up)
network.create_condition(is_opposite_BB, guide_to_opposite_BB)
network.create_condition(is_step_up, up_to_sidewalk)

network.create_add_link(check_BB, is_BB)
network.create_add_link(check_crosswalk, is_crosswalk)
network.create_add_link(check_pedestrian_TL, is_pedestrian_TL)
network.create_add_link(check_color_of_pedestrian_TL, pedestrian_TL_is_blue)
network.create_add_link(check_color_of_pedestrian_TL, pedestrian_TL_is_red)
network.create_add_link(guide_to_BB, on_BB)
network.create_add_link(guide_to_BB, in_front_of_crosswalk)
network.create_add_link(guide_to_crosswalk, on_BB)
network.create_add_link(guide_to_crosswalk, in_front_of_crosswalk)
network.create_add_link(check_cars, no_cars_approaching)
network.create_add_link(wait_signal, waiting_signal)
network.create_add_link(check_step_down, is_step_down)
network.create_add_link(enter_intersection, crossing_intersection)
network.create_add_link(check_opposite_BB, is_opposite_BB)
# network.create_add_link(check_TL_in_other_direction, is_TL_in_other_direction)
network.create_add_link(check_step_up, is_step_up)
network.create_add_link(guide_to_opposite_BB, in_front_of_opposite_BB)
network.create_add_link(up_to_sidewalk, on_opposite_sidewalk)

network.create_delete_link(enter_intersection, on_BB)
network.create_delete_link(enter_intersection, in_front_of_crosswalk)
network.create_delete_link(enter_intersection, waiting_signal)
network.create_delete_link(up_to_sidewalk, crossing_intersection)
network.create_delete_link(up_to_sidewalk, in_front_of_opposite_BB)

network.create_delete_link(check_pedestrian_TL, is_crosswalk)
network.create_delete_link(check_color_of_pedestrian_TL, is_pedestrian_TL)
network.create_delete_link(guide_to_BB, is_BB)
network.create_delete_link(guide_to_crosswalk, is_crosswalk)
network.create_delete_link(check_cars, in_front_of_crosswalk)
network.create_delete_link(wait_signal, on_BB)
network.create_delete_link(wait_signal, in_front_of_crosswalk)
network.create_delete_link(wait_signal, pedestrian_TL_is_red)
network.create_delete_link(check_step_down, no_cars_approaching)
network.create_delete_link(check_step_down, on_BB)
network.create_delete_link(check_step_down, in_front_of_crosswalk)
network.create_delete_link(check_step_down, pedestrian_TL_is_blue)
network.create_delete_link(enter_intersection, is_step_down)
network.create_delete_link(check_opposite_BB, is_crosswalk)
network.create_delete_link(check_opposite_BB, crossing_intersection)
network.create_delete_link(check_step_up, crossing_intersection)
network.create_delete_link(check_step_up, in_front_of_opposite_BB)
network.create_delete_link(guide_to_opposite_BB, is_opposite_BB)
network.create_delete_link(up_to_sidewalk, is_step_up)

at_intersection.activate(time.time())


for _ in range(100):
    network.stop_notifying()
    network.decay_activation()
    network.propagate_externally()
    network.propagate_internally()
    t = time.time()
    network.execute(t)
    network.start_notifying()
    time.sleep(0.5)